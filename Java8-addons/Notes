1. Functional Interface - The Interface who contains only one abstract method but can have multiple default and static method
==> Runnable --> run()
==> Callable --> call()
==> Comparable --> compareTo()
==> Comparator --> compare()

2. CONSUMER FUNCTIONAL INTERFACE
==> Consumer<T> is an in-built functional interface introduced in Java8.
==> Consumer can be used in all contexts where an object needs to be consumed i.e. taken as input, and some operation
    is to be performed on the object without returning any value.

==> /**
      * Performs this operation on the given argument.
      * @param t the input argument
      */

      void accept(T t);

3. PREDICATE FUNCTIONAL INTERFACE
==> This Functional interface used for conditional check where you think,
==> we can use these true/false returning functions in day to day programming we should choose Predicate

==> /**
      * Evaluates this predicate on the given argument.
      * @param t the input argument
      */

      boolean test(T t)

4. SUPPLIER FUNCTIONAL INTERFACE
==> Supplier can be used in all contexts where there is no input but an output is expected

==> /**
      * Gets a result
      * @return a result
      */

      T get();

5. STREAM IN JAVA
==> Stream API is used to process collections of objects
==> A Stream is a sequence of objects that supports various methods which can be pipelined to produce the desired results
==> A Stream is not a data structure instead it takes input from the collections, Arrays or I/O channels
==> Streams don't change the original data structure, they only provide the result as per the pipelined methods.

6. Map() & flatMap()
==> Java 8 stream API provides map() and flatMap() method. Both these methods are intermediate methods and returns another stream as part of the output
==> map() method used for transformation
==> flatMap() used for transformation & flattering
==> flatMap() -> map() + flattering

map() method -> Data Transformation
==> map() takes Stream<T> as input and return Stream<R>
==> Stream<R> map(Stream<T> input) {}
==> It's mapper function produces single value for each input value.
==> Hence, it is also called One-To-One mapping

DATA TRANSFORMATION

Stream.of("a", "b", "c", "d"); ==> [A,B,C,D] ---> Transform data from lowercase to uppercase

DATA Flattering
[[1,2], [3,4], [5,6], [7,8]] ==> [1,2,3,4,5,6,7,8] ---> convert stream of stream into single stream

*********************************
map()
=> It process stream of values
=> It does only mapping
=> It's mapper function produces single value for each input value
=> It is a One-To-One mapping
=> Data Transformation: From Stream to Stream
=> Use this method when the mapper function is producing a single value for each input value

***********************************
flatMap()
=> It process stream of stream of values
=> It performs mapping as well as flattening
=> It's mapper function produces multiple values for each input value
=> It is a One-To-Many mapping
=> Data Transformation: From Stream<Stream to Stream
=> Use this method when the mapper function is producing multiple values for each input value.

What is Map-Reduce ?
=> Map-Reduce is functional programming model it serves our 2 purpose
=> Map --- Transforming data
=> Reduce --- Aggregating data
(combine elements of a stream and produces a single value)

Ex: Stream: [2,4,6,9,1,3,7] Sum of numbers present in stream?

=> Map() --> Transform Stream<Object> to Stream of int
=> Reduce() --> combine stream of int and produce the sum result

***********************************************************************************
What is Java Parallel Streams?
=> Java Parallel Streams is a feature of Java 8, it meant for utilizing multiple cores of the processor
=> Nomally any java code has one stream of processing, where it is executed sequentially. Whereas by using parallel streams,
   we can divide the code into multiple streams that are executed in parallel on seperate cores and the final result is
   the combination of the individual outcomes
=> The order of execution, however, is not under our control.


